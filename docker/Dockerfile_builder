#########################################################################################
##  Stage 2: build NVIMGCODEC wheels on top of the dependencies image built in Stage 1
#########################################################################################
ARG DEPS_IMAGE_NAME
# clean builder without source code inside
FROM ${DEPS_IMAGE_NAME} as builder

ARG PYVER=3.7
ARG PYV=37

ENV PYVER=${PYVER} PYV=${PYV} PYTHONPATH=/opt/python/v

ENV PYBIN=${PYTHONPATH}/bin \
    PYLIB=${PYTHONPATH}/lib

ENV PATH=/opt/python/cp37-cp37m/bin:/opt/python/cp38-cp38/bin:/opt/python/cp39-cp39/bin:${PYBIN}:/opt/python/cp310-cp310/bin:/opt/python/cp311-cp311/bin:${PYBIN}:${PATH} \
    LD_LIBRARY_PATH=/usr/local/lib:/opt/nvidia/nvimgcodec/${NVIMGCODEC_BUILD_DIR}:/opt/python/cp37-cp37m/lib:/opt/python/cp38-cp38/lib:/opt/python/cp39-cp39/lib:/opt/python/cp310-cp310/lib:/opt/python/cp311-cp311/lib:${PYLIB}:${LD_LIBRARY_PATH} \
    LIBRARY_PATH=/usr/local/lib:/opt/nvidia/nvimgcodec/${NVIMGCODEC_BUILD_DIR}:/opt/python/cp37-cp37m/lib:/opt/python/cp38-cp38/lib:/opt/python/cp39-cp39/lib:/opt/python/cp310-cp310/lib:/opt/python/cp311-cp311/lib:${PYLIB}:${LIBRARY_PATH}

RUN ln -s /opt/python/cp${PYV}* /opt/python/v

# install Python bindings and patch it to use the clang we have here
RUN python -m pip install future setuptools wheel clang==14.0 flake8 && \
    PY_CLANG_PATH=$(echo $(pip show clang) | sed 's/.*Location: \(.*\) Requires.*/\1/')/clang/cindex.py && \
    LIBCLANG_PATH=/usr/local/lib/libclang.so && \
    sed -i "s|library_file = None|library_file = \"${LIBCLANG_PATH}\"|" ${PY_CLANG_PATH} && \
    rm -rf /root/.cache/pip/

RUN ldconfig

WORKDIR /opt/nvimgcodec

ARG CC
ARG CXX
ENV CC=${CC}
ENV CXX=${CXX}
# Optional build arguments

ARG ARCH
ENV ARCH=${ARCH}
ARG CUDA_TARGET_ARCHS
ENV CUDA_TARGET_ARCHS=${CUDA_TARGET_ARCHS}
ARG CMAKE_BUILD_TYPE
ENV CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}

ARG ARCH
ENV ARCH=${ARCH}
ARG BUILD_LIBRARY
ENV BUILD_LIBRARY=${BUILD_LIBRARY}
ARG BUILD_TEST
ENV BUILD_TEST=${BUILD_TEST}
ARG BUILD_SAMPLES
ENV BUILD_SAMPLES=${BUILD_SAMPLES}
ARG BUILD_CVCUDA_SAMPLES
ENV BUILD_CVCUDA_SAMPLES=${BUILD_CVCUDA_SAMPLES}
ARG BUILD_DOCS=
ENV BUILD_DOCS=${BUILD_DOCS}
ARG BUILD_EXTENSIONS
ENV BUILD_EXTENSIONS=${BUILD_EXTENSIONS}
ARG BUILD_NVJPEG_EXT
ENV BUILD_NVJPEG_EXT=${BUILD_NVJPEG_EXT}
ARG BUILD_NVJPEG2K_EXT
ENV BUILD_NVJPEG2K_EXT=${BUILD_NVJPEG2K_EXT}
ARG BUILD_NVBMP_EXT
ENV BUILD_NVBMP_EXT=${BUILD_NVBMP_EXT}
ARG BUILD_NVPNM_EXT
ENV BUILD_NVPNM_EXT=${BUILD_NVPNM_EXT}
ARG BUILD_LIBJPEG_TURBO_EXT
ENV BUILD_LIBJPEG_TURBO_EXT=${BUILD_LIBJPEG_TURBO_EXT}
ARG BUILD_LIBTIFF_EXT
ENV BUILD_LIBTIFF_EXT=${BUILD_LIBTIFF_EXT}
ARG BUILD_OPENCV_EXT
ENV BUILD_OPENCV_EXT=${BUILD_OPENCV_EXT}
ARG BUILD_PYTHON
ENV BUILD_PYTHON=${BUILD_PYTHON}
ARG BUILD_WHEEL
ENV BUILD_WHEEL=${BUILD_WHEEL}
ARG WITH_DYNAMIC_NVJPEG
ENV WITH_DYNAMIC_NVJPEG=${WITH_DYNAMIC_NVJPEG}
ARG WITH_DYNAMIC_NVJPEG2K
ENV WITH_DYNAMIC_NVJPEG2K=${WITH_DYNAMIC_NVJPEG2K}
ARG NVIDIA_BUILD_ID
ENV NVIDIA_BUILD_ID=${NVIDIA_BUILD_ID}
ARG GIT_SHA
ENV GIT_SHA=${GIT_SHA}
ARG NVIMGCODEC_TIMESTAMP
ENV NVIMGCODEC_TIMESTAMP=${NVIMGCODEC_TIMESTAMP}
ARG BUILD_FLAVOR
ENV BUILD_FLAVOR=${BUILD_FLAVOR}
ARG WHL_PLATFORM_NAME
ENV WHL_PLATFORM_NAME=${WHL_PLATFORM_NAME}
ARG WHL_OUTDIR
ENV WHL_OUTDIR=${WHL_OUTDIR}
ARG WHL_COMPRESSION

RUN mkdir /wheelhouse && chmod 0777 /wheelhouse

FROM builder
COPY . .

ARG NVIMGCODEC_BUILD_DIR=build-docker-release
WORKDIR /opt/nvimgcodec/${NVIMGCODEC_BUILD_DIR}

RUN bash /opt/nvimgcodec/docker/build_helper.sh
