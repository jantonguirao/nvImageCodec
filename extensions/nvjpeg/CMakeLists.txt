set(NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME nvjpeg_ext)

set(NVIMGCDCS_NVJPEG_EXT_SRC
  cuda_decoder.cpp
  hw_decoder.cpp
  cuda_encoder.cpp
  type_convert.cpp
  nvjpeg_ext.cpp
  nvjpeg_utils.cpp
  exception.cpp
)

add_library(${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME} SHARED ${NVIMGCDCS_NVJPEG_EXT_SRC} ext_module.cpp)
add_library(${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME}_static STATIC ${NVIMGCDCS_NVJPEG_EXT_SRC})

if (UNIX)
target_link_libraries(
  ${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME}
  PUBLIC CUDA::cudart_static CUDA::nvjpeg_static CUDA::culibos)
else()
target_link_libraries(
  ${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME}
  PUBLIC CUDA::cudart_static CUDA::nvjpeg)
endif()

if(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fPIC -fvisibility=hidden")
  set_target_properties(${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME} PROPERTIES
    POSITION_INDEPENDENT_CODE ON
    VERSION ${PROJECT_VERSION}
    SOVERSION ${PROJECT_VERSION_MAJOR})
else()
  set_target_properties(${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME} PROPERTIES
    POSITION_INDEPENDENT_CODE ON
    VERSION ${PROJECT_VERSION}
    OUTPUT_NAME ${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME}_${PROJECT_VERSION_MAJOR}
    ARCHIVE_OUTPUT_NAME ${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME})
endif()

if(UNIX)
  install(TARGETS ${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME}
    LIBRARY DESTINATION extensions
    PUBLIC_HEADER DESTINATION include
  )

else()
  install(TARGETS ${NVIMGCDCS_NVJPEG_EXT_LIBRARY_NAME}
    RUNTIME DESTINATION extensions
    LIBRARY DESTINATION lib64
    ARCHIVE DESTINATION lib64
    PUBLIC_HEADER DESTINATION include
  )
endif()
