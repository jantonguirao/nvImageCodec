/*
 * Copyright (c) 2023, NVIDIA CORPORATION & AFFILIATES.  All rights reserved.
 *
 * NVIDIA CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA CORPORATION is strictly prohibited.
 */

#pragma once

#include <tuple>
#include <vector>

#include <nvimgcodecs.h>

namespace nvimgcdcs { namespace test { namespace {

// clang-format off
#define S_(STATUS) NVIMGCDCS_PROCESSING_STATUS_#STATUS
std::vector<std::vector<nvimgcdcsProcessingStatus_t>> statuses_to_return_case1_with_force_format_true{
    //codec/batch_item->
    // |
    // V
    {NVIMGCDCS_PROCESSING_STATUS_SUCCESS, NVIMGCDCS_PROCESSING_STATUS_ORIENTATION_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_ORIENTATION_UNSUPPORTED},
    {                                     NVIMGCDCS_PROCESSING_STATUS_ROI_UNSUPPORTED,         NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED},
    {                                     NVIMGCDCS_PROCESSING_STATUS_SUCCESS,                 NVIMGCDCS_PROCESSING_STATUS_SUCCESS}};

std::vector<nvimgcdcsProcessingStatus_t> statuses_to_expect_for_case1_with_force_format_true{
    NVIMGCDCS_PROCESSING_STATUS_SUCCESS, NVIMGCDCS_PROCESSING_STATUS_SUCCESS, NVIMGCDCS_PROCESSING_STATUS_SUCCESS};

std::vector<std::vector<nvimgcdcsProcessingStatus_t>> statuses_to_return_case1_with_force_format_false{
    //codec/batch_item->
    // |
    // V
    {NVIMGCDCS_PROCESSING_STATUS_SUCCESS, NVIMGCDCS_PROCESSING_STATUS_ORIENTATION_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_ORIENTATION_UNSUPPORTED},
    {},
    {}};

std::vector<nvimgcdcsProcessingStatus_t> statuses_to_expect_for_case1_with_force_format_false{
    NVIMGCDCS_PROCESSING_STATUS_SUCCESS, NVIMGCDCS_PROCESSING_STATUS_ORIENTATION_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_ORIENTATION_UNSUPPORTED};

std::vector<std::vector<nvimgcdcsProcessingStatus_t>> statuses_to_return_case2_with_force_format_true{
    //codec/batch_item->
    // |
    // V
    {NVIMGCDCS_PROCESSING_STATUS_CODEC_UNSUPPORTED,    NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED,  NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED},
    {NVIMGCDCS_PROCESSING_STATUS_BACKEND_UNSUPPORTED,  NVIMGCDCS_PROCESSING_STATUS_BACKEND_UNSUPPORTED,     NVIMGCDCS_PROCESSING_STATUS_SAMPLE_FORMAT_UNSUPPORTED},
    {NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_SAMPLE_TYPE_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_CODEC_UNSUPPORTED}};

std::vector<nvimgcdcsProcessingStatus_t> statuses_to_expect_for_case2_with_force_format_true{
    NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_SAMPLE_TYPE_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_CODEC_UNSUPPORTED};

std::vector<std::vector<nvimgcdcsProcessingStatus_t>> statuses_to_return_case2_with_force_format_false{
    //codec/batch_item->
    // |
    // V
   {NVIMGCDCS_PROCESSING_STATUS_CODEC_UNSUPPORTED,    NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED},
   {NVIMGCDCS_PROCESSING_STATUS_BACKEND_UNSUPPORTED,  NVIMGCDCS_PROCESSING_STATUS_BACKEND_UNSUPPORTED,    NVIMGCDCS_PROCESSING_STATUS_SAMPLE_FORMAT_UNSUPPORTED},
   {                                                  NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED,   NVIMGCDCS_PROCESSING_STATUS_SAMPLE_TYPE_UNSUPPORTED}};


std::vector<nvimgcdcsProcessingStatus_t> statuses_to_expect_for_case2_with_force_format_false{
    NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_SAMPLE_TYPE_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_SAMPLE_FORMAT_UNSUPPORTED};



std::vector<std::vector<nvimgcdcsProcessingStatus_t>> statuses_to_return_case3_with_force_format_true{
    //codec/batch_item->
    // |
    // V
    {NVIMGCDCS_PROCESSING_STATUS_NUM_PLANES_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_FAIL,                     NVIMGCDCS_PROCESSING_STATUS_FAIL},
    {NVIMGCDCS_PROCESSING_STATUS_BACKEND_UNSUPPORTED,    NVIMGCDCS_PROCESSING_STATUS_NUM_CHANNELS_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_FAIL},
    {NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED,   NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED ,  NVIMGCDCS_PROCESSING_STATUS_SAMPLING_UNSUPPORTED}};

std::vector<nvimgcdcsProcessingStatus_t> statuses_to_expect_for_case3_with_force_format_true{
    NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_SAMPLING_UNSUPPORTED};

std::vector<std::vector<nvimgcdcsProcessingStatus_t>> statuses_to_return_case3_with_force_format_false{
    //codec/batch_item->
    // |
    // V
    {NVIMGCDCS_PROCESSING_STATUS_NUM_PLANES_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_FAIL,                     NVIMGCDCS_PROCESSING_STATUS_FAIL},
    {                                                    NVIMGCDCS_PROCESSING_STATUS_NUM_CHANNELS_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_FAIL},
    {NVIMGCDCS_PROCESSING_STATUS_SAMPLING_UNSUPPORTED}};

std::vector<nvimgcdcsProcessingStatus_t> statuses_to_expect_for_case3_with_force_format_false{
    NVIMGCDCS_PROCESSING_STATUS_NUM_PLANES_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_NUM_CHANNELS_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_SAMPLING_UNSUPPORTED};



std::vector<std::vector<nvimgcdcsProcessingStatus_t>> statuses_to_return_case4_with_force_format_true{
    //codec/batch_item->
    // |
    // V
    {NVIMGCDCS_PROCESSING_STATUS_NUM_PLANES_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_NUM_CHANNELS_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_FAIL,                     NVIMGCDCS_PROCESSING_STATUS_FAIL},
    {NVIMGCDCS_PROCESSING_STATUS_BACKEND_UNSUPPORTED,    NVIMGCDCS_PROCESSING_STATUS_NUM_CHANNELS_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_BACKEND_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_FAIL},
    {NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED,   NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED ,  NVIMGCDCS_PROCESSING_STATUS_SAMPLING_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_FAIL}};

std::vector<nvimgcdcsProcessingStatus_t> statuses_to_expect_for_case4_with_force_format_true{
    NVIMGCDCS_PROCESSING_STATUS_ENCODING_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_SAMPLING_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_FAIL};

std::vector<std::vector<nvimgcdcsProcessingStatus_t>> statuses_to_return_case4_with_force_format_false{
    //codec/batch_item->
    // |
    // V
    {NVIMGCDCS_PROCESSING_STATUS_NUM_PLANES_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_NUM_CHANNELS_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_FAIL,                     NVIMGCDCS_PROCESSING_STATUS_FAIL},
    {NVIMGCDCS_PROCESSING_STATUS_NUM_CHANNELS_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_BACKEND_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_FAIL},
    {NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED, NVIMGCDCS_PROCESSING_STATUS_SAMPLING_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_FAIL}};


std::vector<nvimgcdcsProcessingStatus_t> statuses_to_expect_for_case4_with_force_format_false{
    NVIMGCDCS_PROCESSING_STATUS_NUM_PLANES_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_NUM_CHANNELS_UNSUPPORTED, 
    NVIMGCDCS_PROCESSING_STATUS_RESOLUTION_UNSUPPORTED, 
    NVIMGCDCS_PROCESSING_STATUS_SAMPLING_UNSUPPORTED|NVIMGCDCS_PROCESSING_STATUS_FAIL};

// clang-format on
}}} // namespace nvimgcdcs::test
